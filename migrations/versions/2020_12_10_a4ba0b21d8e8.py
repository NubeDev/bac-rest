"""empty message

Revision ID: a4ba0b21d8e8
Revises: 
Create Date: 2020-12-10 17:15:35.525747

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a4ba0b21d8e8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
# ### commands auto generated by Alembic - please adjust! ###
    op.create_table('networks',
    sa.Column('uuid', sa.String(length=80), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('enable', sa.Boolean(), nullable=False),
    sa.Column('fault', sa.Boolean(), nullable=True),
    sa.Column('history_enable', sa.Boolean(), nullable=False),
    sa.Column('driver', sa.String(length=80), nullable=True),
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('wires_plat',
    sa.Column('uuid', sa.String(length=80), nullable=False),
    sa.Column('device_id', sa.String(length=80), nullable=False),
    sa.Column('device_name', sa.String(length=80), nullable=False),
    sa.Column('client_id', sa.String(length=80), nullable=False),
    sa.Column('client_name', sa.String(length=80), nullable=False),
    sa.Column('site_id', sa.String(length=80), nullable=False),
    sa.Column('site_name', sa.String(length=80), nullable=False),
    sa.Column('site_address', sa.String(length=80), nullable=False),
    sa.Column('site_city', sa.String(length=80), nullable=False),
    sa.Column('site_state', sa.String(length=80), nullable=False),
    sa.Column('site_zip', sa.String(length=80), nullable=False),
    sa.Column('site_country', sa.String(length=80), nullable=False),
    sa.Column('site_lat', sa.String(length=80), nullable=False),
    sa.Column('site_lon', sa.String(length=80), nullable=False),
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('devices',
    sa.Column('uuid', sa.String(length=80), nullable=False),
    sa.Column('network_uuid', sa.String(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('enable', sa.String(length=80), nullable=False),
    sa.Column('fault', sa.Boolean(), nullable=True),
    sa.Column('history_enable', sa.Boolean(), nullable=False),
    sa.Column('driver', sa.String(length=80), nullable=True),
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['network_uuid'], ['networks.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('name', 'network_uuid')
    )
    op.create_table('modbus_networks',
    sa.Column('type', sa.Enum('RTU', 'TCP', name='modbustype'), nullable=False),
    sa.Column('timeout', sa.Float(), nullable=False),
    sa.Column('device_timeout_global', sa.Float(), nullable=False),
    sa.Column('point_timeout_global', sa.Float(), nullable=False),
    sa.Column('rtu_port', sa.String(length=80), nullable=True),
    sa.Column('rtu_speed', sa.Integer(), nullable=True),
    sa.Column('rtu_stop_bits', sa.Integer(), nullable=True),
    sa.Column('rtu_parity', sa.Enum('O', 'E', 'N', 'Odd', 'Even', name='modbusrtuparity'), nullable=True),
    sa.Column('rtu_byte_size', sa.Integer(), nullable=True),
    sa.Column('uuid', sa.String(length=80), nullable=False),
    sa.ForeignKeyConstraint(['uuid'], ['networks.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('rtu_port')
    )
    op.create_table('modbus_devices',
    sa.Column('type', sa.Enum('RTU', 'TCP', name='modbustype'), nullable=False),
    sa.Column('address', sa.Integer(), nullable=False),
    sa.Column('tcp_ip', sa.String(length=80), nullable=True),
    sa.Column('tcp_port', sa.Integer(), nullable=True),
    sa.Column('zero_based', sa.Boolean(), nullable=False),
    sa.Column('timeout', sa.Float(), nullable=False),
    sa.Column('timeout_global', sa.Boolean(), nullable=False),
    sa.Column('ping_point', sa.String(length=10), nullable=True),
    sa.Column('modbus_network_uuid_constraint', sa.String(), nullable=False),
    sa.Column('uuid', sa.String(length=80), nullable=False),
    sa.ForeignKeyConstraint(['uuid'], ['devices.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('address', 'type', 'modbus_network_uuid_constraint'),
    sa.UniqueConstraint('tcp_ip', 'type', 'modbus_network_uuid_constraint')
    )
    op.create_table('points',
    sa.Column('uuid', sa.String(length=80), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('device_uuid', sa.String(), nullable=False),
    sa.Column('enable', sa.Boolean(), nullable=False),
    sa.Column('history_enable', sa.Boolean(), nullable=False),
    sa.Column('history_type', sa.Enum('COV', 'INTERVAL', name='historytype'), nullable=False),
    sa.Column('history_interval', sa.Integer(), nullable=False),
    sa.Column('writable', sa.Boolean(), nullable=False),
    sa.Column('write_value', sa.Float(), nullable=True),
    sa.Column('cov_threshold', sa.Float(), nullable=False),
    sa.Column('value_round', sa.Integer(), nullable=False),
    sa.Column('value_offset', sa.Float(), nullable=False),
    sa.Column('value_operation', sa.Enum('ADD', 'SUBTRACT', 'MULTIPLY', 'DIVIDE', 'BOOL_INVERT', name='mathoperation'), nullable=True),
    sa.Column('input_min', sa.Float(), nullable=True),
    sa.Column('input_max', sa.Float(), nullable=True),
    sa.Column('scale_min', sa.Float(), nullable=True),
    sa.Column('scale_max', sa.Float(), nullable=True),
    sa.Column('driver', sa.String(length=80), nullable=True),
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['device_uuid'], ['devices.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('name', 'device_uuid')
    )
    op.create_table('modbus_points',
    sa.Column('register', sa.Integer(), nullable=False),
    sa.Column('register_length', sa.Integer(), nullable=False),
    sa.Column('function_code', sa.Enum('READ_COILS', 'READ_DISCRETE_INPUTS', 'READ_HOLDING_REGISTERS', 'READ_INPUT_REGISTERS', 'WRITE_COIL', 'WRITE_REGISTER', 'WRITE_COILS', 'WRITE_REGISTERS', name='modbusfunctioncode'), nullable=False),
    sa.Column('data_type', sa.Enum('RAW', 'INT16', 'UINT16', 'INT32', 'UINT32', 'FLOAT', 'DOUBLE', 'DIGITAL', name='modbusdatatype'), nullable=False),
    sa.Column('data_endian', sa.Enum('LEB_BEW', 'LEB_LEW', 'BEB_LEW', 'BEB_BEW', name='modbusdataendian'), nullable=False),
    sa.Column('timeout', sa.Float(), nullable=False),
    sa.Column('timeout_global', sa.Boolean(), nullable=False),
    sa.Column('modbus_device_uuid_constraint', sa.String(), nullable=False),
    sa.Column('uuid', sa.String(length=80), nullable=False),
    sa.ForeignKeyConstraint(['uuid'], ['points.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('register', 'function_code', 'modbus_device_uuid_constraint')
    )
    op.create_table('point_stores',
    sa.Column('point_uuid', sa.String(), nullable=False),
    sa.Column('value', sa.Float(), nullable=True),
    sa.Column('value_original', sa.Float(), nullable=True),
    sa.Column('value_raw', sa.String(), nullable=True),
    sa.Column('fault', sa.Boolean(), nullable=False),
    sa.Column('fault_message', sa.String(), nullable=True),
    sa.Column('ts', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['point_uuid'], ['points.uuid'], ),
    sa.PrimaryKeyConstraint('point_uuid')
    )
    op.create_table('point_stores_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('point_uuid', sa.String(), nullable=False),
    sa.Column('value', sa.Float(), nullable=True),
    sa.Column('value_original', sa.Float(), nullable=True),
    sa.Column('value_raw', sa.String(), nullable=True),
    sa.Column('fault', sa.Boolean(), nullable=False),
    sa.Column('fault_message', sa.String(), nullable=True),
    sa.Column('ts', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['point_uuid'], ['points.uuid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
# ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('point_stores_history')
    op.drop_table('point_stores')
    op.drop_table('modbus_points')
    op.drop_table('points')
    op.drop_table('modbus_devices')
    op.drop_table('modbus_networks')
    op.drop_table('devices')
    op.drop_table('wires_plat')
    op.drop_table('networks')
    # ### end Alembic commands ###
